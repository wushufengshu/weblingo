<?php

use Illuminate\Database\Seeder;
use App\Lesson;
use App\Code;

class JavascriptLessonTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $faker = Faker\Factory::create();

        $admin = \App\Admin::first()->id;


$js1 = Lesson::create([
        	'admin_id' => $admin,
        	'course_id' => 3,
                'title' => 'Javascript Tutorial',
                'slug' => 'js_java_tutorial',
          	 ]);

Code::create([
        	'course_id' =>3,
                'lesson_id' => $js1->id,
                'heading' => 'JavaScript Tutorial',
		'heading_body'=> '<p>JavaScript is a lightweight, interpreted programming language. It is designed for creating network-centric applications. It is complimentary to and integrated with Java. JavaScript is very easy to implement because it is integrated with HTML. It is open and cross-platform.</p></p>',
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '',
]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js1->id,
                'heading' => 'Audience',
		'heading_body'=> '<p>This tutorial has been prepared for JavaScript beginners to help them understand the basic functionality of JavaScript to build dynamic web pages and web applications.</p>',
		'html_code' => '',		
		'css_code' => '',
                'javascript_code' => '',
          	 ]);

Code::create([
        	'course_id' =>3,
                'lesson_id' => $js1->id,
                'heading' => 'Prerequisites',
		'heading_body'=> '<p>For this tutorial, it is assumed that the reader have a prior knowledge of HTML coding. It would help if the reader had some prior exposure to object-oriented programming concepts and a general idea on creating online applications.</p>',
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js1->id,
                'heading' => 'Execute JavaScript Online',
		'heading_body'=> '<p>For most of the examples given in this tutorial you will find Try it option, so just make use of this option to execute your JavaScript programs at the spot and enjoy your learning.</p>
<p>Try following example using Try it option available at the top right corner of the below sample code box &minus;</p>',
		'html_code' => '<html>
   <body>
   
      <script language="javascript" type="text/javascript">
         <!--
            document.write("Hello World!")
         //-->
      </script>
      
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);

$js2 = Lesson::create([
        	'admin_id' => $admin,
        	'course_id' => 3,
                'title' => 'JavaScript - Overview',
                'slug' => 'js_javaScript_overview',
          	 ]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js2->id,
                'heading' => 'What is JavaScript ?',
		'heading_body'=> '<p>Javascript is a dynamic computer programming language. It is lightweight and most commonly used as a part of web pages, whose implementations allow client-side script to interact with the user and make dynamic pages. It is an interpreted programming language with object-oriented capabilities.</p>
<p>JavaScript was first known as <b>LiveScript,</b> but Netscape changed its name to JavaScript, possibly because of the excitement being generated by Java. JavaScript made its first appearance in Netscape 2.0 in 1995 with the name <b>LiveScript</b>. The general-purpose core of the language has been embedded in Netscape, Internet Explorer, and other web browsers.</p><ul class="list">
<li><p>JavaScript is a lightweight, interpreted programming language.</p></li>
<li><p>Designed for creating network-centric applications.</p></li>
<li><p>Complementary to and integrated with Java.</p></li>
<li><p>Complementary to and integrated with HTML.</p></li>
<li><p>Open and cross-platform</p></li>',
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js2->id,
                'heading' => 'Client-side JavaScript',
		'heading_body'=> '<p>Client-side JavaScript is the most common form of the language. The script should be included in or referenced by an HTML document for the code to be interpreted by the browser.</p>
<p>It means that a web page need not be a static HTML, but can include programs that interact with the user, control the browser, and dynamically create HTML content.</p>
<p>The JavaScript client-side mechanism provides many advantages over traditional CGI server-side scripts. For example, you might use JavaScript to check if the user has entered a valid e-mail address in a form field.</p>
<p>The JavaScript code is executed when the user submits the form, and only if all the entries are valid, they would be submitted to the Web Server.</p>
<p>JavaScript can be used to trap user-initiated events such as button clicks, link navigation, and other actions that the user initiates explicitly or implicitly.</p>', 
		'html_code' => '',
		'css_code' => '', 
                'javascript_code' => '',
          	 ]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js2->id,
                'heading' => 'Advantages of JavaScript',
		'heading_body'=> '<p>The merits of using JavaScript are &minus;</p>
<ul class="list">
<li><p><b>Less server interaction</b> &minus; You can validate user input before sending the page off to the server. This saves server traffic, which means less load on your server.</p></li>
<li><p><b>Immediate feedback to the visitors</b> &minus; They don\'t have to wait for a page reload to see if they have forgotten to enter something.</p></li>
<li><p><b>Increased interactivity</b> &minus; You can create interfaces that react when the user hovers over them with a mouse or activates them via the keyboard.</p></li>
<li><p><b>Richer interfaces</b> &minus; You can use JavaScript to include such items as drag-and-drop components and sliders to give a Rich Interface to your site visitors.</p></li>
</ul>', 
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '', 
          	 ]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js2->id,
                'heading' => 'Limitations of JavaScript',
		'heading_body'=> '<p>We cannot treat JavaScript as a full-fledged programming language. It lacks the following important features &minus;</p>
<ul class="list">
<li><p>Client-side JavaScript does not allow the reading or writing of files. This has been kept for security reason.</p></li>
<li><p>JavaScript cannot be used for networking applications because there is no such support available.</p></li>
<li><p>JavaScript doesn\'t have any multithreading or multiprocessor capabilities.</p></li>
</ul>
<p>Once again, JavaScript is a lightweight, interpreted programming language that allows you to build interactivity into otherwise static HTML pages.</p>', 
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '', 
          	 ]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js2->id,
                'heading' => 'JavaScript Development Tools',
		'heading_body'=> '<p>One of major strengths of JavaScript is that it does not require expensive development tools. You can start with a simple text editor such as Notepad. Since it is an interpreted language inside the context of a web browser, you don\'t even need to buy a compiler.</p>
<p>To make our life simpler, various vendors have come up with very nice JavaScript editing tools. Some of them are listed here &minus;</p>
<ul class="list">
<li><p><b>Microsoft FrontPage</b> &minus; Microsoft has developed a popular HTML editor called FrontPage. FrontPage also provides web developers with a number of JavaScript tools to assist in the creation of interactive websites.</p></li>
<li><p><b>Macromedia Dreamweaver MX</b> &minus; Macromedia Dreamweaver MX is a very popular HTML and JavaScript editor in the professional web development crowd. It provides several handy prebuilt JavaScript components, integrates well with databases, and conforms to new standards such as XHTML and XML.</p></li>
<li><p><b>Macromedia HomeSite 5</b> &minus; HomeSite 5 is a well-liked HTML and JavaScript editor from Macromedia that can be used to manage personal websites effectively.</p></li>
</ul>', 
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js2->id,
                'heading' => 'Where is JavaScript Today ?',
		'heading_body'=> '<p>The ECMAScript Edition 5 standard will be the first update to be released in over four years. JavaScript 2.0 conforms to Edition 5 of the ECMAScript standard, and the difference between the two is extremely minor.</p>
<p>The specification for JavaScript 2.0 can be found on the following site: <a rel="nofollow" href="http://www.ecmascript.org/" target="_blank">http://www.ecmascript.org/</a></p>
<p>Today, Netscape\'s JavaScript and Microsoft\'s JScript conform to the ECMAScript standard, although both the languages still support the features that are not a part of the standard.</p>
<hr />', 
		'html_code' => '',
		'css_code' => '',
                'javascript_code' =>'',
          	 ]);

$js3 = Lesson::create([
        	'admin_id' => $admin,
        	'course_id' => 3,
                'title' => 'JavaScript - Syntax',
                'slug' => 'js_javaScript_syntax',
          	 ]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js3->id,
                'heading' => 'JavaScript - Syntax',
		'heading_body'=> '<p>JavaScript can be implemented using JavaScript statements that are placed within the <b>&lt;script&gt;... &lt;/script&gt;</b>.</p>
<p>You can place the <b>&lt;script&gt;</b> tags, containing your JavaScript, anywhere within your web page, but it is normally recommended that you should keep it within the <b>&lt;head&gt;</b> tags.</p>', 
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '<script ...>
   JavaScript code
</script>', 
          	 ]);

Code::create([
        	'course_id' =>3,
                'lesson_id' => $js3->id,
                'heading' => 'Your First JavaScript Script', 
		'heading_body'=> '<p>Let us take a sample example to print out "Hello World". We added an optional HTML comment that surrounds our JavaScript code. This is to save our code from a browser that does not support JavaScript. The comment ends with a "//--&gt;". Here "//" signifies a comment in JavaScript, so we add that to prevent a browser from reading the end of the HTML comment as a piece of JavaScript code. Next, we call a function <b>document.write</b> which writes a string into our HTML document.</p>
<p>This function can be used to write text, HTML, or both. Take a look at the following code.</p>', 
		'html_code' => '<html>
   <body>
      <script language="javascript" type="text/javascript">
         <!--
            document.write("Hello World!")
         //-->
      </script>
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js3->id,
                'heading' => 'Whitespace and Line Breaks',
		'heading_body'=> '<p>JavaScript ignores spaces, tabs, and newlines that appear in JavaScript programs. You can use spaces, tabs, and newlines freely in your program and you are free to format and indent your programs in a neat and consistent way that makes the code easy to read and understand.</p>', 
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);

Code::create([
        	'course_id' =>3,
                'lesson_id' => $js3->id,
                'heading' => 'Semicolons are Optional',
		'heading_body'=> '<p>Simple statements in JavaScript are generally followed by a semicolon character, just as they are in C, C++, and Java. JavaScript, however, allows you to omit this semicolon if each of your statements are placed on a separate line. For example, the following code could be written without semicolons.</p>', 
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '<script language="javascript" type="text/javascript">
   <!--
      var1 = 10
      var2 = 20
   //-->
</script>',
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js3->id,
                'heading' => 'Case Sensitivity',
		'heading_body'=> '<p>JavaScript is a case-sensitive language. This means that the language keywords, variables, function names, and any other identifiers must always be typed with a consistent capitalization of letters.</p>
<p>So the identifiers <b>Time</b> and <b>TIME</b> will convey different meanings in JavaScript.</p>
<p><b>NOTE</b> &minus; Care should be taken while writing variable and function names in JavaScript.</p>', 
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js3->id,
                'heading' => 'Comments in JavaScript',
		'heading_body'=> '<p>JavaScript supports both C-style and C++-style comments, Thus &minus;</p>
<ul class="list">
<li><p>Any text between a // and the end of a line is treated as a comment and is ignored by JavaScript.</p></li>
<li><p>Any text between the characters /* and */ is treated as a comment. This may span multiple lines.</p></li>
<li><p>JavaScript also recognizes the HTML comment opening sequence &lt;!--. JavaScript treats this as a single-line comment, just as it does the // comment.</p></li>
<li><p>The HTML comment closing sequence --&gt; is  not recognized by JavaScript so it should be written as //--&gt;.</p></li>
</ul>', 
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '<script language="javascript" type="text/javascript">
   <!--
   
      // This is a comment. It is similar to comments in C++
   
      /*
      * This is a multiline comment in JavaScript
      * It is very similar to comments in C Programming
      */
   
   //-->
</script>', 
          	 ]);




$js4 = Lesson::create([
        	'admin_id' => $admin,
        	'course_id' => 3,
                'title' => 'Enabling JavaScript in Browsers',
                'slug' => 'js_javaScript_enabling',
          	 ]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js4->id,
                'heading' => 'Enabling JavaScript in Browsers',
		'heading_body'=> '<p>All the modern browsers come with built-in support for JavaScript. Frequently, you may need to enable or disable this support manually. This chapter explains the procedure of enabling and disabling JavaScript support in your browsers: Internet Explorer, Firefox, chrome, and Opera.</p>',
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js4->id,
                'heading' => 'JavaScript in Internet Explorer',
		'heading_body'=> '<p>Here are simple steps to turn on or turn off JavaScript in your Internet Explorer &minus;</p>
<ul class="list">
<li><p>Follow <b>Tools &rarr; Internet Options</b> from the menu.</p></li>
<li><p>Select <b>Security</b> tab from the dialog box.</p></li>
<li><p>Click the <b>Custom Level</b> button.</p></li>
<li><p>Scroll down till you find <b>Scripting option.</b></p></li>
<li><p>Select <i>Enable</i> radio button under <b>Active scripting</b>.</p></li>', 
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js4->id,
                'heading' => 'JavaScript in Firefox', 
		'heading_body'=> '<p>Here are the steps to turn on or turn off JavaScript in Firefox &minus;</p>
<ul class="list">
<li><p>Open a new tab &rarr; type <b>about: config</b> in the address bar.</p></li>
<li><p>Then you will find the warning dialog. Select <b>I’ll be careful, I promise!</b></p></li>
<li><p>Then you will find the list of <b>configure options</b> in the browser.</p></li>
<li><p>In the search bar, type <b>javascript.enabled</b>.</p></li>
<li><p>There you will find the option to enable or disable javascript by right-clicking on the value of that option &rarr; <b>select toggle</b>.</p></li>
</ul>
<p>If javascript.enabled is true; it converts to false upon clicking <b>toogle</b>. If javascript is disabled; it gets enabled upon clicking toggle.</p>', 
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js4->id,
                'heading' => 'JavaScript in Chrome',
		'heading_body'=> '<p>Here are the steps to turn on or turn off JavaScript in Chrome &minus;</p>
<ul class="list">
<li><p>Click the Chrome menu at the top right hand corner of your browser.</p></li>
<li><p>Select <b>Settings</b>.</p></li>
<li><p>Click <b>Show advanced settings</b> at the end of the page.</p></li>
<li><p>Under the <b>Privacy</b> section, click the Content settings button.</p></li>
<li><p>In the "Javascript" section, select "Do not allow any site to run JavaScript" or "Allow all sites to run JavaScript (recommended)".</p></li>
</ul>',
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);



Code::create([
        	'course_id' =>3,
                'lesson_id' => $js4->id,
                'heading' => 'JavaScript in Opera',
		'heading_body'=> '<p>Here are the steps to turn on or turn off JavaScript in Opera &minus;</p>
<ul class="list">
<li><p>Follow <b>Tools &rarr; Preferences</b> from the menu.</p></li>
<li><p>Select <b>Advanced</b> option from the dialog box.</p></li>
<li><p>Select <b>Content </b> from the listed items.</p></li>
<li><p>Select <b>Enable JavaScript</b> checkbox.</p></li>
<li><p>Finally click OK and come out.</p></li>
</ul>',
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js4->id,
                'heading' => 'Warning for Non-JavaScript Browsers',
		'heading_body'=> '<p>If you have to do something important using JavaScript, then you can display a warning message to the user using <b>&lt;noscript&gt;</b> tags.</p>
<p>You can add a <b>noscript</b> block immediately after the script block as follows &minus;</p>',  
		'html_code' => '<html>
   <body>
      
      <script language="javascript" type="text/javascript">
         <!--
            document.write("Hello World!")
         //-->
      </script>
      
      <noscript>
         Sorry...JavaScript is needed to go ahead.
      </noscript>
      
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);



$js5 = Lesson::create([
        	'admin_id' => $admin,
        	'course_id' => 3,
                'title' => 'JavaScript - Placement in HTML File',
                'slug' => 'js_javaScript_placement',
          	 ]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js5->id,
                'heading' => 'JavaScript - Placement in HTML File',
		'heading_body'=> '<p>There is a flexibility given to include JavaScript code anywhere in an HTML document. However the most preferred ways to include JavaScript in an HTML file are as follows &minus;</p>
<ul class="list">
<li><p>Script in &lt;head&gt;...&lt;/head&gt; section.</p></li>
<li><p>Script in &lt;body&gt;...&lt;/body&gt; section.</p></li>
<li><p>Script in &lt;body&gt;...&lt;/body&gt; and &lt;head&gt;...&lt;/head&gt; sections.</p></li>
<li><p>Script in an external file and then include in &lt;head&gt;...&lt;/head&gt; section.</p></li>
</ul>
<p>In the following section, we will see how we can place JavaScript in an HTML file in different ways.</p>',
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js5->id,
                'heading' => '<h2>JavaScript in <head>...</head> section</h2>',
		'heading_body'=> '<p>If you want to have a script run on some event, such as when a user clicks somewhere, then you will place that script in the head as follows &minus;</p>',
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '<html>
   <head>      
      <script type = "text/javascript">
         <!--
            function sayHello() {
               alert("Hello World")
            }
         //-->
      </script>     
   </head>
   
   <body>
      <input type = "button" onclick = "sayHello()" value = "Say Hello" />
   </body>  
</html>',
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js5->id,
                'heading' => 'JavaScript in <body>...</body> sections',
		'heading_body'=> '<p>You can put your JavaScript code in &lt;head&gt; and &lt;body&gt; section altogether as follows &minus;</p>',
		'html_code' => '<html>
   		<head>
   		   <script type = "text/javascript">
   	      <!--
            function sayHello() {
               alert("Hello World")
            }
         //-->
      </script>
   </head>
   
   <body>
      <script type = "text/javascript">
         <!--
            document.write("Hello World")
         //-->
      </script>
      
      <input type = "button" onclick = "sayHello()" value = "Say Hello" />
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js5->id,
                'heading' => 'JavaScript in External File',
		'heading_body'=> '<p>As you begin to work more extensively with JavaScript, you will be likely to find that there are cases where you are reusing identical JavaScript code on multiple pages of a site.</p>
<p>You are not restricted to be maintaining identical code in multiple HTML files. The <b>script</b> tag provides a mechanism to allow you to store JavaScript in an external file and then include it into your HTML files.</p>
<p>Here is an example to show how you can include an external JavaScript file in your HTML code using <b>script</b> tag and its <b>src</b> attribute.</p>',
		'html_code' => '<html>
   <head>
      <script type = "text/javascript" src = "filename.js" ></script>
   </head>
   
   <body>
      .......
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '', 
          	 ]);





$js6 = Lesson::create([
        	'admin_id' => $admin,
        	'course_id' => 3,
                'title' => 'JavaScript - Variables',
                'slug' => 'js_javaScript_variables',
          	 ]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js6->id,
                'heading' => 'JavaScript Datatypes',
		'heading_body'=> '<p>One of the most fundamental characteristics of a programming language is the set of data types it supports. These are the type of values that can be represented and manipulated in a programming language.</p>
<p>JavaScript allows you to work with three primitive data types &minus;</p>
<ul class="list">
<li><p><b>Numbers,</b> eg. 123, 120.50 etc.</p></li>
<li><p><b>Strings</b> of text  e.g. "This text string" etc.</p></li>
<li><p><b>Boolean</b> e.g. true or false.</p></li>
</ul>
<p>JavaScript also defines two trivial data types, <b>null</b> and <b>undefined,</b> each of which defines only a single value. In addition to these primitive data types, JavaScript supports a composite data type known as <b>object</b>. We will cover objects in detail in a separate chapter.</p>
<p><b>Note</b> &minus; JavaScript does not make a distinction between integer values and floating-point values. All numbers in JavaScript are represented as floating-point values. JavaScript represents numbers using the 64-bit floating-point format defined by the IEEE 754 standard.</p>',
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);



Code::create([
        	'course_id' =>3,
                'lesson_id' => $js6->id,
                'heading' => 'JavaScript Variables',
		'heading_body'=> '<p>Like many other programming languages, JavaScript has variables. Variables can be thought of as named containers. You can place data into these containers and then refer to the data simply by naming the container.</p>
<p>Before you use a variable in a JavaScript program, you must declare it. Variables are declared with the <b>var</b> keyword as follows.</p>
<pre class="prettyprint notranslate">
&lt;script type="text/javascript"&gt;
   &lt;!--
      var money;
      var name;
   //--&gt;
&lt;/script&gt;
</pre>
<p>You can also declare multiple variables with the same <b>var</b> keyword as follows &minus;</p>
<pre class="prettyprint notranslate">
&lt;script type="text/javascript"&gt;
   &lt;!--
      var money, name;
   //--&gt;
&lt;/script&gt;
</pre>
<p>Storing a value in a variable is called <b>variable initialization</b>. You can do variable initialization at the time of variable creation or at a later point in time when you need that variable.</p>
<p>For instance, you might create a variable named <b>money</b> and assign the value 2000.50 to it later. For another variable, you can assign a value at the time of initialization as follows.</p>
<pre class="prettyprint notranslate tryit">
&lt;script type="text/javascript"&gt;
   &lt;!--
      var name = "Ali";
      var money;
      money = 2000.50;
   //--&gt;
&lt;/script&gt;
</pre>
<p><b>Note</b> &minus; Use the <b>var</b> keyword only for declaration or initialization, once for the life of any variable name in a document. You should not re-declare same variable twice.</p>
<p>JavaScript is <b>untyped</b> language. This means that a JavaScript variable can hold a value of any data type. Unlike many other languages, you don\'t have to tell JavaScript during variable declaration what type of value the variable will hold. The value type of a variable can change during the execution of a program and JavaScript takes care of it automatically.</p>',
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '<script type="text/javascript">
   <!--
      var name = "Ali";
      var money;
      money = 2000.50;
   //-->
</script>',
          	 ]);




Code::create([
        	'course_id' =>3,
                'lesson_id' => $js6->id,
                'heading' => 'JavaScript Variable Scope', 
		'heading_body'=> '<p>The scope of a variable is the region of your program in which it is defined. JavaScript variables have only two scopes.</p>
<ul class="list">
<li><p><b>Global Variables</b> &minus; A global variable has global scope which means it can be defined anywhere in your JavaScript code.</p></li>
<li><p><b>Local Variables</b> &minus; A local variable will be visible only within a function where it is defined. Function parameters are always local to that function.</p></li>
</ul>
<p>Within the body of a function, a local variable takes precedence over a global variable with the same name. If you declare a local variable or function parameter with the same name as a global variable, you effectively hide the global variable. Take a look into the following example.</p>',
		'html_code' => '<html>
   <body onload = checkscope();>
      <script type = "text/javascript">
         <!--
            var myVar = "global"; // Declare a global variable
            function checkscope( ) {
               var myVar = "local";  // Declare a local variable
               document.write(myVar);
            }
         //-->
      </script>
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);



Code::create([
        	'course_id' =>3,
                'lesson_id' => $js6->id,
                'heading' => 'JavaScript Variable Names',
		'heading_body'=> '<p>While naming your variables in JavaScript, keep the following rules in mind.</p>
<ul class="list">
<li><p>You should not use any of the JavaScript reserved keywords as a variable name. These keywords are mentioned in the next section. For example, <b>break</b> or <b>boolean</b> variable names are not valid.</p></li>
<li><p>JavaScript variable names should not start with a numeral (0-9). They must begin with a letter or an underscore character. For example, <b>123test</b> is an invalid variable name but <b>_123test</b> is a valid one.</p></li>
<li><p>JavaScript variable names are case-sensitive. For example, <b>Name</b> and <b>name</b> are two different variables.</p></li>
</ul>', 
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);



Code::create([
        	'course_id' =>3,
                'lesson_id' => $js6->id,
                'heading' => 'JavaScript Reserved Words',
		'heading_body'=> '<p>A list of all the reserved words in JavaScript are given in the following table. They cannot be used as JavaScript variables, functions, methods, loop labels, or any object names.</p>
<table class="table table-bordered" style="text-align:center;">
<tr>
<td>abstract</td>
<td>else</td>
<td>instanceof</td>
<td>switch</td>
</tr>
<tr>
<td>boolean</td>
<td>enum</td>
<td>int</td>
<td>synchronized</td>
</tr>
<tr>
<td>break</td>
<td>export</td>
<td>interface</td>
<td>this</td>
</tr>
<tr>
<td>byte</td>
<td>extends</td>
<td>long</td>
<td>throw</td>
</tr>
<tr>
<td>case</td>
<td>false</td>
<td>native</td>
<td>throws</td>
</tr>
<tr>
<td>catch</td>
<td>final</td>
<td>new</td>
<td>transient</td>
</tr>
<tr>
<td>char</td>
<td>finally</td>
<td>null</td>
<td>true</td>
</tr>
<tr>
<td>class</td>
<td>float</td>
<td>package</td>
<td>try</td>
</tr>
<tr>
<td>const</td>
<td>for</td>
<td>private</td>
<td>typeof</td>
</tr>
<tr>
<td>continue</td>
<td>function</td>
<td>protected</td>
<td>var</td>
</tr>
<tr>
<td>debugger</td>
<td>goto</td>
<td>public</td>
<td>void</td>
</tr>
<tr>
<td>default</td>
<td>if</td>
<td>return</td>
<td>volatile</td>
</tr>
<tr>
<td>delete</td>
<td>implements</td>
<td>short</td>
<td>while</td>
</tr>
<tr>
<td>do</td>
<td>import</td>
<td>static</td>
<td>with</td>
</tr>
<tr>
<td>double</td>
<td>in</td>
<td>super</td>
<td></td>
</tr>
</table>',
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);


$js7 = Lesson::create([
        	'admin_id' => $admin,
        	'course_id' => 3,
                'title' => 'JavaScript - Operators',
                'slug' => 'js_operators',
          	 ]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js7->id,
                'heading' => 'What is an operator?', 
		'heading_body'=> '<p>Let us take a simple expression <b>4 + 5 is equal to 9</b>. Here 4 and 5 are called <b>operands</b> and ‘+’ is called the <b>operator</b>. JavaScript supports the following types of operators.</p>
<ul class="list">
<li><p>Arithmetic Operators</p></li>
<li><p>Comparison Operators</p></li>
<li><p>Logical (or Relational) Operators</p></li>
<li><p>Assignment Operators</p></li>
<li><p>Conditional (or ternary) Operators</p></li>
</ul>
<p>Lets have a look on all operators one by one.</p>', 
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js7->id,
                'heading' => 'Arithmetic Operators', 
		'heading_body'=> '<p>JavaScript supports the following arithmetic operators &minus;</p>
<p>Assume variable A holds 10 and variable B holds 20, then &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;width:9%;">Sr.No</th>
<th style="text-align:center;">Operator and Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>+ (Addition)</b></p>
<p>Adds two operands</p>
<p><b>Ex:</b> A + B will give 30</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>- (Subtraction)</b></p>
<p>Subtracts the second operand from the first</p>
<p><b>Ex:</b> A - B will give -10</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>* (Multiplication)</b></p>
<p>Multiply both operands</p>
<p><b>Ex:</b> A * B will give 200</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>/ (Division)</b></p>
<p>Divide the numerator by the denominator</p>
<p><b>Ex:</b> B / A will give 2</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>% (Modulus)</b></p>
<p>Outputs the remainder of an integer division</p>
<p><b>Ex:</b> B % A will give 0</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>++ (Increment)</b></p>
<p>Increases an integer value by one</p>
<p><b>Ex:</b> A++ will give 11</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td><p><b>-- (Decrement)</b></p>
<p>Decreases an integer value by one</p>
<p><b>Ex:</b> A-- will give 9</p>
</td>
</tr>
</table>
<p><b>Note</b> &minus; Addition operator (+) works for Numeric as well as Strings. e.g. "a" + 10 will give "a10".</p>
<h3>Example</h3>
<p>The following code shows how to use arithmetic operators in JavaScript.</p>',
		'html_code' => '<html>
   <body>
   
      <script type="text/javascript">
         <!--
            var a = 33;
            var b = 10;
            var c = "Test";
            var linebreak = "<br />";
         
            document.write("a + b = ");
            result = a + b;
            document.write(result);
            document.write(linebreak);
         
            document.write("a - b = ");
            result = a - b;
            document.write(result);
            document.write(linebreak);
         
            document.write("a / b = ");
            result = a / b;
            document.write(result);
            document.write(linebreak);
         
            document.write("a % b = ");
            result = a % b;
            document.write(result);
            document.write(linebreak);
         
            document.write("a + b + c = ");
            result = a + b + c;
            document.write(result);
            document.write(linebreak);
         
            a = ++a;
            document.write("++a = ");
            result = ++a;
            document.write(result);
            document.write(linebreak);
         
            b = --b;
            document.write("--b = ");
            result = --b;
            document.write(result);
            document.write(linebreak);
         //-->
      </script>
      
      Set the variables to different values and then try...
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);




Code::create([
        	'course_id' =>3,
                'lesson_id' => $js7->id,
                'heading' => 'Comparison Operators', 
		'heading_body'=> '<p>JavaScript supports the following comparison operators &minus;</p>
<p>Assume variable A holds 10 and variable B holds 20, then &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Operator and Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>= = (Equal)</b></p>
<p>Checks if the value of two operands are equal or not, if yes, then the condition becomes true.</p>
<p><b>Ex:</b> (A == B) is not true.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>!= (Not Equal)</b></p>
<p>Checks if the value of two operands are equal or not, if the values are not equal, then the condition becomes true.</p>
<p><b>Ex:</b> (A != B) is true.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>&gt; (Greater than)</b></p>
<p>Checks if the value of the left operand is greater than the value of the right operand, if yes, then the condition becomes true.</p>
<p><b>Ex:</b> (A &gt; B) is not true.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>&lt; (Less than)</b></p>
<p>Checks if the value of the left operand is less than the value of the right operand, if yes, then the condition becomes true.</p>
<p><b>Ex:</b> (A &lt; B) is true.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>&gt;= (Greater than or Equal to)</b></p>
<p>Checks if the value of the left operand is greater than or equal to the value of the right operand, if yes, then the condition becomes true.</p>
<p><b>Ex:</b> (A &gt;= B) is not true.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>&lt;= (Less than or Equal to)</b></p>
<p>Checks if the value of the left operand is less than or equal to the value of the right operand, if yes, then the condition becomes true.</p>
<p><b>Ex:</b> (A &lt;= B) is true.</p>
</td>
</tr>
</table>
<h3>Example</h3>
<p>The following code shows how to use comparison operators in JavaScript.</p>',
		'html_code' => '<html>
   <body>
   
      <script type="text/javascript">
         <!--
            var a = 10;
            var b = 20;
            var linebreak = "<br />";
      
            document.write("(a == b) => ");
            result = (a == b);
            document.write(result);
            document.write(linebreak);
         
            document.write("(a < b) => ");
            result = (a < b);
            document.write(result);
            document.write(linebreak);
         
            document.write("(a > b) => ");
            result = (a > b);
            document.write(result);
            document.write(linebreak);
         
            document.write("(a != b) => ");
            result = (a != b);
            document.write(result);
            document.write(linebreak);
         
            document.write("(a >= b) => ");
            result = (a >= b);
            document.write(result);
            document.write(linebreak);
         
            document.write("(a <= b) => ");
            result = (a <= b);
            document.write(result);
            document.write(linebreak);
         //-->
      </script>
      
      Set the variables to different values and different operators and then try...
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);




Code::create([
        	'course_id' =>3,
                'lesson_id' => $js7->id,
                'heading' => 'Logical Operators',
		'heading_body'=> '<p>JavaScript supports the following logical operators &minus;</p>
<p>Assume variable A holds 10 and variable B holds 20, then &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Operator and Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>&amp;&amp; (Logical AND)</b></p>
<p>If both the operands are non-zero, then the condition becomes true.</p>
<p><b>Ex:</b> (A && B) is true.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>|| (Logical OR)</b></p>
<p>If any of the two operands are non-zero, then the condition becomes true.</p>
<p><b>Ex:</b> (A || B) is true.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>! (Logical NOT)</b></p>
<p>Reverses the logical state of its operand. If a condition is true, then the Logical NOT operator will make it false.</p>
<p><b>Ex:</b> ! (A && B) is false.</p>
</td>
</tr>
</table>
<h3>Example</h3>
<p>Try the following code to learn how to implement Logical Operators in JavaScript.</p>', 
		'html_code' => '<html>
   <body>
   
      <script type="text/javascript">
         <!--
            var a = true;
            var b = false;
            var linebreak = "<br />";
      
            document.write("(a && b) => ");
            result = (a && b);
            document.write(result);
            document.write(linebreak);
         
            document.write("(a || b) => ");
            result = (a || b);
            document.write(result);
            document.write(linebreak);
         
            document.write("!(a && b) => ");
            result = (!(a && b));
            document.write(result);
            document.write(linebreak);
         //-->
      </script>
      
      <p>Set the variables to different values and different operators and then try...</p>
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '', 
          	 ]);



Code::create([
        	'course_id' =>3,
                'lesson_id' => $js7->id,
                'heading' => 'Bitwise Operators',
		'heading_body'=> '<p>JavaScript supports the following bitwise operators &minus;</p>
<p>Assume variable A holds 2 and variable B holds 3, then &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Operator and Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>&amp; (Bitwise AND)</b></p>
<p>It performs a Boolean AND operation on each bit of its integer arguments.</p>
<p><b>Ex:</b> (A & B) is 2.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>| (BitWise OR)</b></p>
<p>It performs a Boolean OR operation on each bit of its integer arguments.</p>
<p><b>Ex:</b> (A | B) is 3.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>^ (Bitwise XOR)</b></p>
<p>It performs a Boolean exclusive OR operation on each bit of its integer arguments. Exclusive OR means that either operand one is true or operand two is true, but not both.</p>
<p><b>Ex:</b> (A ^ B) is 1.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>~ (Bitwise Not)</b></p>
<p>It is a unary operator and operates by reversing all the bits in the operand.</p>
<p><b>Ex:</b> (~B) is -4.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>&lt;&lt; (Left Shift)</b></p>
<p>It moves all the bits in its first operand to the left by the number of places specified in the second operand. New bits are filled with zeros. Shifting a value left by one position is equivalent to multiplying it by 2, shifting two positions is equivalent to multiplying by 4, and so on.</p>
<p><b>Ex:</b> (A &lt;&lt; 1) is 4.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>&gt;&gt; (Right Shift)</b></p>
<p>Binary Right Shift Operator. The left operand’s value is moved right by the number of bits specified by the right operand.</p>
<p><b>Ex:</b> (A &gt;&gt; 1) is 1.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td><p><b>&gt;&gt;&gt; (Right shift with Zero)</b></p>
<p>This operator is just like the &gt;&gt; operator, except that the bits shifted in on the left are always zero.</p>
<p><b>Ex:</b> (A &gt;&gt;&gt; 1) is 1.</p>
</td>
</tr>
</table>
<h3>Example</h3>
<p>Try the following code to implement Bitwise operator in JavaScript.</p>',
		'html_code' => '<html>
   <body>
   
      <script type="text/javascript">
         <!--
            var a = 2; // Bit presentation 10
            var b = 3; // Bit presentation 11
            var linebreak = "<br />";
         
            document.write("(a & b) => ");
            result = (a & b);
            document.write(result);
            document.write(linebreak);
         
            document.write("(a | b) => ");
            result = (a | b);
            document.write(result);
            document.write(linebreak);
         
            document.write("(a ^ b) => ");
            result = (a ^ b);
            document.write(result);
            document.write(linebreak);
         
            document.write("(~b) => ");
            result = (~b);
            document.write(result);
            document.write(linebreak);
         
            document.write("(a << b) => ");
            result = (a << b);
            document.write(result);
            document.write(linebreak);
         
            document.write("(a >> b) => ");
            result = (a >> b);
            document.write(result);
            document.write(linebreak);
         //-->
      </script>
      
      <p>Set the variables to different values and different operators and then try...</p>
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);



Code::create([
        	'course_id' =>3,
                'lesson_id' => $js7->id,
                'heading' => 'Assignment Operators',
		'heading_body'=> '<p>JavaScript supports the following assignment operators &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Operator and Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>= (Simple Assignment )</b></p>
<p>Assigns values from the right side operand to the left side operand</p>
<p><b>Ex:</b> C = A + B will assign the value of A + B into C</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>+= (Add and Assignment)</b></p>
<p>It adds the right operand to the left operand and assigns the result to the left operand.</p>
<p><b>Ex:</b> C += A is equivalent to C = C + A</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>&minus;= (Subtract and Assignment)</b></p>
<p>It subtracts the right operand from the left operand and assigns the result to the left operand.</p>
<p><b>Ex:</b> C -= A is equivalent to C = C - A</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>*= (Multiply and Assignment)</b></p>
<p>It multiplies the right operand with the left operand and assigns the result to the left operand.</p>
<p><b>Ex:</b> C *= A is equivalent to C = C * A</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>/= (Divide and Assignment)</b></p>
<p>It divides the left operand with the right operand and assigns the result to the left operand.</p>
<p><b>Ex:</b> C /= A is equivalent to C = C / A</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>%= (Modules and Assignment)</b></p>
<p>It takes modulus using two operands and assigns the result to the left operand.</p>
<p><b>Ex:</b> C %= A is equivalent to C = C % A</p>
</td>
</tr>
</table>
<p><b>Note</b> &minus; Same logic applies to Bitwise operators so they will become like &lt;&lt;=, &gt;&gt;=, &gt;&gt;=, &amp;=, |= and ^=.</p>
<h3>Example</h3>
<p>Try the following code to implement assignment operator in JavaScript.</p>',
		'html_code' => '<html>
   <body>
   <script type="text/javascript">
         <!--
            var a = 33;
            var b = 10;
            var linebreak = "<br />";
         
            document.write("Value of a => (a = b) => ");
            result = (a = b);
            document.write(result);
            document.write(linebreak);
         
            document.write("Value of a => (a += b) => ");
            result = (a += b);
            document.write(result);
            document.write(linebreak);
         
            document.write("Value of a => (a -= b) => ");
            result = (a -= b);
            document.write(result);
            document.write(linebreak);
         
            document.write("Value of a => (a *= b) => ");
            result = (a *= b);
            document.write(result);
            document.write(linebreak);
         
            document.write("Value of a => (a /= b) => ");
            result = (a /= b);
            document.write(result);
            document.write(linebreak);
         
            document.write("Value of a => (a %= b) => ");
            result = (a %= b);
            document.write(result);
            document.write(linebreak);
         //-->
      </script>
      
      
      <p>Set the variables to different values and different operators and then try...</p>
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);




Code::create([
        	'course_id' =>3,
                'lesson_id' => $js7->id,
                'heading' => 'Miscellaneous Operator',
		'heading_body'=> '<p>We will discuss two operators here that are quite useful in JavaScript: the <b>conditional operator</b> (? :) and the <b>typeof operator</b>.</p>
<h3>Conditional Operator (? :)</h3>
<p>The conditional operator first evaluates an expression for a true or false value and then executes one of the two given statements depending upon the result of the evaluation.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;" width="10%">Sr.No</th>
<th style="text-align:center;">Operator and Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>? : (Conditional )</b></p>
<p>If Condition is true? Then value X : Otherwise value Y</p>
</td>
</tr>
</table>
<h3>Example</h3>
<p>Try the following code to understand how the Conditional Operator works in JavaScript.</p>',
		'html_code' => '<html>
   <body>
   
      <script type="text/javascript">
         <!--
            var a = 10;
            var b = 20;
            var linebreak = "<br />";
         
            document.write ("((a > b) ? 100 : 200) => ");
            result = (a > b) ? 100 : 200;
            document.write(result);
            document.write(linebreak);
         
            document.write ("((a < b) ? 100 : 200) => ");
            result = (a < b) ? 100 : 200;
            document.write(result);
            document.write(linebreak);
         //-->
      </script>
      
      <p>Set the variables to different values and different operators and then try...</p>
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);




Code::create([
        	'course_id' =>3,
                'lesson_id' => $js7->id,
                'heading' => 'typeof Operator',
		'heading_body'=> '<p>The <b>typeof</b> operator is a unary operator that is placed before its single operand, which can be of any type. Its value is a string indicating the data type of the operand.</p>
<p>The <i>typeof</i> operator evaluates to "number", "string", or "boolean" if its operand is a number, string, or boolean value and returns true or false based on the evaluation.</p>
<p>Here is a list of the return values for the <b>typeof</b> Operator.</p>
<table class="table table-bordered" style="text-align:center;">
<tr>
<th style="text-align:center;" width="20%">Type</th>
<th style="text-align:center;">String Returned by typeof</th>
</tr>
<tr>
<td>Number</td>
<td>"number"</td>
</tr>
<tr>
<td>String</td>
<td>"string"</td>
</tr>
<tr>
<td>Boolean</td>
<td>"boolean"</td>
</tr>
<tr>
<td>Object</td>
<td>"object"</td>
</tr>
<tr>
<td>Function</td>
<td>"function"</td>
</tr>
<tr>
<td>Undefined</td>
<td>"undefined"</td>
</tr>
<tr>
<td>Null</td>
<td>"object"</td>
</tr>
</table>
<h3>Example</h3>
<p>The following code shows how to implement <b>typeof</b> operator.</p>',
		'html_code' => '<html>
   <body>
      
      <script type="text/javascript">
         <!--
            var a = 10;
            var b = "String";
            var linebreak = "<br />";
         
            result = (typeof b == "string" ? "B is String" : "B is Numeric");
            document.write("Result => ");
            document.write(result);
            document.write(linebreak);
         
            result = (typeof a == "string" ? "A is String" : "A is Numeric");
            document.write("Result => ");
            document.write(result);
            document.write(linebreak);
         //-->
      </script>
      
      <p>Set the variables to different values and different operators and then try...</p>
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);



$js8 = Lesson::create([
        	'admin_id' => $admin,
        	'course_id' => 3,
                'title' => 'JavaScript - if...else Statement',
                'slug' => 'js_if_else_statement',
          	 ]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js8->id,
                'heading' => 'JavaScript - if...else Statement',
		'heading_body'=> '<p>While writing a program, there may be a situation when you need to adopt one out of a given set of paths. In such cases, you need to use conditional statements that allow your program to make correct decisions and perform right actions.</p>
<p>JavaScript supports conditional statements which are used to perform different actions based on different conditions. Here we will explain the <b>if..else</b> statement.</p>',
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js8->id,
                'heading' => 'Flow Chart of if-else',
		'heading_body'=> '<p>The following flow chart shows how the if-else statement works.</p>
<p>JavaScript supports the following forms of <b>if..else</b> statement &minus;</p>
<ul class="list">
<li><p>if statement</p></li>
<li><p>if...else statement</p> </li>
<li><p>if...else if... statement.</p></li>
</ul>
<h2>if statement</h2>
<p>The <b>if</b> statement is the fundamental control statement that allows JavaScript to make decisions and execute statements conditionally.</p>
<h3>Syntax</h3>
<p>The syntax for a basic if statement is as follows &minus;</p>
<pre class="prettyprint notranslate">
if (expression){
   Statement(s) to be executed if expression is true
}
</pre>
<p>Here a JavaScript expression is evaluated. If the resulting value is true, the given statement(s) are executed. If the expression is false, then no statement would be not executed. Most of the times, you will use comparison operators while making decisions.</p>
<h3>Example</h3>
<p>Try the following example to understand how the <b>if</b> statement works.</p>',
		'html_code' => '<html>
   <body>
      
      <script type="text/javascript">
         <!--
            var age = 20;
         
            if( age > 18 ){
               document.write("<b>Qualifies for driving</b>");
            }
         //-->
      </script>
      
      <p>Set the variable to different value and then try...</p>
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js8->id,
                'heading' => 'if...else statement:',
		'heading_body'=> '<p>The <b>\'if...else\'</b> statement is the next form of control statement that allows JavaScript to execute statements in a more controlled way.</p>
<h3>Syntax</h3>
<pre class="prettyprint notranslate">
if (expression){
   Statement(s) to be executed if expression is true
}

else{
   Statement(s) to be executed if expression is false
}
</pre>
<p>Here JavaScript expression is evaluated. If the resulting value is true, the given statement(s) in the ‘if’ block, are executed. If the expression is false, then the given statement(s) in the else block are executed.</p>
<h3>Example</h3>
<p>Try the following code to learn how to implement an if-else statement in JavaScript.</p>',
		'html_code' => '<html>
   <body>
   
      <script type="text/javascript">
         <!--
            var age = 15;
         
            if( age > 18 ){
               document.write("<b>Qualifies for driving</b>");
            }
            
            else{
               document.write("<b>Does not qualify for driving</b>");
            }
         //-->
      </script>
      
      <p>Set the variable to different value and then try...</p>
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js8->id,
                'heading' => 'if...else if... statement',
		'heading_body'=> '<p>The <b>if...else if...</b> statement is an advanced form of <b>if…else</b> that allows JavaScript to make a correct decision out of several conditions.</p>
<h3>Syntax</h3>
<p>The syntax of an if-else-if statement is as follows &minus;</p>',
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => 'if (expression 1){
   Statement(s) to be executed if expression 1 is true
}

else if (expression 2){
   Statement(s) to be executed if expression 2 is true
}

else if (expression 3){
   Statement(s) to be executed if expression 3 is true
}

else{
   Statement(s) to be executed if no expression is true
}',
          	 ]);


$js9 = Lesson::create([
        	'admin_id' => $admin,
        	'course_id' => 3,
                'title' => 'JavaScript - Switch Case',
                'slug' => 'js_javaScript_switchcase',
          	 ]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js9->id,
                'heading' => 'JavaScript - Switch Case',
		'heading_body'=> '<p>You can use multiple <b>if...else…if</b> statements, as in the previous chapter, to perform a multiway branch. However, this is not always the best solution, especially when all of the branches depend on the value of a single variable.</p>
<p>Starting with JavaScript 1.2, you can use a <b>switch</b> statement which handles exactly this situation, and it does so more efficiently than repeated <b>if...else if</b> statements.</p>',
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '', 
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js9->id,
                'heading' => 'Flow Chart',
		'heading_body'=> '<p>The following flow chart explains a switch-case statement works.</p>
<img src="/javascript/images/switch_case.jpg" alt=""/>
<h3>Syntax</h3>
<p>The objective of a <b>switch</b> statement is to give an expression to evaluate and several different statements to execute based on the value of the expression. The interpreter checks each <b>case</b> against the value of the expression until a match is found. If nothing matches, a <b>default</b> condition will be used.</p>
<pre class="prettyprint notranslate">
switch (expression)
{
   case condition 1: statement(s)
   break;
   
   case condition 2: statement(s)
   break;
   ...
   
   case condition n: statement(s)
   break;
   
   default: statement(s)
}
</pre>
<p>The <b>break</b> statements indicate the end of a particular case. If they were omitted, the interpreter would continue executing each statement in each of the following cases.</p>
<p>We will explain <b>break</b> statement in <i>Loop Control</i> chapter.</p>
<h3>Example</h3>
<p>Try the following example to implement switch-case statement.</p>',
		'html_code' => '<html>
   <body>
   
      <script type="text/javascript">
         <!--
            var grade=\'A\';
            document.write("Entering switch block<br />");
            switch (grade)
            {
               case \'A\': document.write("Good job<br />");
               break;
            
               case \'B\': document.write("Pretty good<br />");
               break;
            
               case \'C\': document.write("Passed<br />");
               break;
            
               case \'D\': document.write("Not so good<br />");
               break;
            
               case \'F\': document.write("Failed<br />");
               break;
            
               default:  document.write("Unknown grade<br />")
            }
            document.write("Exiting switch block");
         //-->
      </script>
      
      <p>Set the variable to different value and then try...</p>
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);




$js10 = Lesson::create([
        	'admin_id' => $admin,
        	'course_id' => 3,
                'title' => 'JavaScript - While Loops',
                'slug' => 'js_javaScript_whileloops',
          	 ]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js10->id,
                'heading' => 'JavaScript - While Loops',
		'heading_body'=> '<p>While writing a program, you may encounter a situation where you need to perform an action over and over again. In such situations, you would need to write loop statements to reduce the number of lines.</p>
<p>JavaScript supports all the necessary loops to ease down the pressure of programming.</p>',
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js10->id,
                'heading' => 'The while Loop',
		'heading_body'=> '<p>The most basic loop in JavaScript is the <b>while</b> loop which would be discussed in this chapter. The purpose of a <b>while</b> loop is to execute a statement or code block repeatedly as long as an <b>expression</b> is true. Once the expression becomes <b>false,</b> the loop terminates.</p>
<h3>Example</h3>
<p>Try the following example to implement while loop.</p>',
		'html_code' => '<html>
   <body>
      
      <script type="text/javascript">
         <!--
            var count = 0;
            document.write("Starting Loop ");
         
            while (count < 10){
               document.write("Current Count : " + count + "<br />");
               count++;
            }
         
            document.write("Loop stopped!");
         //-->
      </script>
      
      <p>Set the variable to different value and then try...</p>
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);



Code::create([
        	'course_id' =>3,
                'lesson_id' => $js10->id,
                'heading' => 'The do...while Loop',
		'heading_body'=> '<h3>Flow Chart</h3>
<p>The flow chart of a <b>do-while</b> loop would be as follows &minus;</p>',
		'html_code' => '<html>
   <body>
   
      <script type="text/javascript">
         <!--
            var count = 0;
            
            document.write("Starting Loop" + "<br />");
            do{
               document.write("Current Count : " + count + "<br />");
               count++;
            }
            
            while (count < 5);
            document.write ("Loop stopped!");
         //-->
      </script>
      
      <p>Set the variable to different value and then try...</p>
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);


$js11 = Lesson::create([
        	'admin_id' => $admin,
        	'course_id' => 3,
                'title' => 'JavaScript - For Loop',
                'slug' => 'js_javaScript_forloop',
          	 ]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js11->id,
                'heading' => 'For Loop', 
		'heading_body'=> '<p>The \'<b>for</b>\' loop is the most compact form of looping. It includes the following three important parts &minus;</p>
<ul class="list">
<li><p>The <b>loop initialization</b> where we initialize our counter to a starting value. The initialization statement is executed before the loop begins.</p></li> 
<li><p>The <b>test statement</b> which will test if a given condition is true or not. If the condition is true, then the code given inside the loop will be executed, otherwise the control will come out of the loop.</p></li>
<li><p>The <b>iteration statement</b> where you can increase or decrease your counter.</p></li>
</ul>
<p>You can put all the three parts in a single line separated by semicolons.</p>
<h2>Flow Chart</h2>
<p>The flow chart of a for loop in JavaScript would be as follows &minus;</p><h3>Example</h3>
<p>Try the following example to learn how a for loop works in JavaScript.</p>',
		'html_code' => '<html>
   <body>
      
      <script type="text/javascript">
         <!--
            var count;
            document.write("Starting Loop" + "<br />");
         
            for(count = 0; count < 10; count++){
               document.write("Current Count : " + count );
               document.write("<br />");
            }
         
            document.write("Loop stopped!");
         //-->
      </script>
      
      <p>Set the variable to different value and then try...</p>
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);



$js12 = Lesson::create([
        	'admin_id' => $admin,
        	'course_id' => 3,
                'title' => 'JavaScript for...in loop',
                'slug' => 'js_javaScript_forinloop',
          	 ]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js12->id,
                'heading' => 'JavaScript for...in loop',
		'heading_body'=> '<p>The <b>for...in</b> loop is used to loop through an object\'s properties. As we have not discussed Objects yet, you may not feel comfortable with this loop. But once you understand how objects behave in JavaScript, you will find this loop very useful.</p> <p>In each iteration, one property from <b>object</b> is assigned to <b>variablename</b> and this loop continues till all the properties of the object are exhausted.</p>
<h3>Example</h3>
<p>Try the following example to implement ‘for-in’ loop. It prints the web browser’s <b>Navigator</b> object.</p>',
		'html_code' => '<html>
   <body>
      
      <script type="text/javascript">
         <!--
            var aProperty;
            document.write("Navigator Object Properties<br /> ");
         
            for (aProperty in navigator) {
               document.write(aProperty);
               document.write("<br />");
            }
            document.write ("Exiting from the loop!");
         //-->
      </script>
      
      <p>Set the variable to different object and then try...</p>
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);



$js13 = Lesson::create([
        	'admin_id' => $admin,
        	'course_id' => 3,
                'title' => 'JavaScript - Loop Control',
                'slug' => 'js_javaScript_loopcontrol',
          	 ]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js13->id,
                'heading' => 'JavaScript - Loop Control',
		'heading_body'=> '<p>JavaScript provides full control to handle loops and switch statements. There may be a situation when you need to come out of a loop without reaching its bottom. There may also be a situation when you want to skip a part of your code block and start the next iteration of the loop.</p>
<p>To handle all such situations, JavaScript provides <b>break</b> and <b>continue</b> statements. These statements are used to immediately come out of any loop or to start the next iteration of any loop respectively.</p>',
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js13->id,
                'heading' => 'The break Statement',
		'heading_body'=> '<p>The <b>break</b> statement, which was briefly introduced with the <i>switch</i> statement, is used to exit a loop early, breaking out of the enclosing curly braces.</p> <h3>Example</h3>
<p>The following example illustrates the use of a <b>break</b> statement with a while loop. Notice how the loop breaks out early once <b>x</b> reaches 5 and reaches to <b>document.write (..)</b> statement just below to the closing curly brace &minus;</p>',
		'html_code' => '<html>
   <body>
      
      <script type="text/javascript">
         <!--
         var x = 1;
         document.write("Entering the loop<br /> ");
         
         while (x < 20)
         {
            if (x == 5){
               break; // breaks out of loop completely
            }
            x = x + 1;
            document.write( x + "<br />");
         }
         
         document.write("Exiting the loop!<br /> ");
         //-->
      </script>
      
      <p>Set the variable to different value and then try...</p>
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);



Code::create([
        	'course_id' =>3,
                'lesson_id' => $js13->id,
                'heading' => 'The continue Statement',
		'heading_body'=> '<p>The <b>continue</b> statement tells the interpreter to immediately start the next iteration of the loop and skip the remaining code block. When a <b>continue</b> statement is encountered, the program flow moves to the loop check expression immediately and if the condition remains true, then it starts the next iteration, otherwise the control comes out of the loop.</p>
<h3>Example</h3>
<p>This example illustrates the use of a <b>continue</b> statement with a while loop. Notice how the <b>continue</b> statement is used to skip printing when the index held in variable <b>x</b> reaches 5 &minus;</p>',
		'html_code' => '<html>
   <body>
      
      <script type="text/javascript">
         <!--
            var x = 1;
            document.write("Entering the loop<br /> ");
         
            while (x < 10)
            {
               x = x + 1;
               
               if (x == 5){
                  continue; // skip rest of the loop body
               }
               document.write( x + "<br />");
            }
         
            document.write("Exiting the loop!<br /> ");
         //-->
      </script>
      
      <p>Set the variable to different value and then try...</p>
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);




Code::create([
        	'course_id' =>3,
                'lesson_id' => $js13->id,
                'heading' => 'Using Labels to Control the Flow',
		'heading_body'=> '<p>Starting from JavaScript 1.2, a label can be used with <b>break</b> and <b>continue</b> to control the flow more precisely. A <b>label</b> is simply an identifier followed by a colon (:) that is applied to a statement or a block of code. We will see two different examples to understand how to use labels with break and continue.</p>
<p><b>Note</b> &minus; Line breaks are not allowed between the <b>‘continue’</b> or <b>‘break’</b> statement and its label name. Also, there should not be any other statement in between a label name and associated loop.</p>
<p>Try the following two examples for a better understanding of Labels.</p>
<h3>Example 1</h3>
<p>The following example shows how to implement Label with a break statement.</p>',
		'html_code' => '<html>
   <body>
      
      <script type="text/javascript">
         <!--
            document.write("Entering the loop!<br /> ");
            outerloop: // This is the label name
         
            for (var i = 0; i < 5; i++)
            {
               document.write("Outerloop: " + i + "<br />");
               innerloop:
               for (var j = 0; j < 5; j++)
               {
                  if (j > 3 ) break ; // Quit the innermost loop
                  if (i == 2) break innerloop; // Do the same thing
                  if (i == 4) break outerloop; // Quit the outer loop
                  document.write("Innerloop: " + j + " <br />");
               }
            }
         
            document.write("Exiting the loop!<br /> ");
         //-->
      </script>
      
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);




$js14 = Lesson::create([
        	'admin_id' => $admin,
        	'course_id' => 3,
                'title' => 'JavaScript - Functions',
                'slug' => 'js_javaScript_functions',
          	 ]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js14->id,
                'heading' => 'JavaScript Functions',
                'heading_body' => '<p>A function is a group of reusable code which can be called anywhere in your program. This eliminates the need of writing the same code again and again. It helps programmers in writing modular codes. Functions allow a programmer to divide a big program into a number of small and manageable functions.</p>
<p>Like any other advanced programming language, JavaScript also supports all the features necessary to write modular code using functions. You must have seen functions like <b>alert()</b> and <b>write()</b> in the earlier chapters. We were using these functions again and again, but they had been written in core JavaScript only once.</p>
<p>JavaScript allows us to write our own functions as well. This section explains how to write your own functions in JavaScript.</p>',
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js14->id,
                'heading' => 'Function Definition',
		'heading_body'=> '<p>Before we use a function, we need to define it. The most common way to define a function in JavaScript is by using the <b>function</b> keyword, followed by a unique function name, a list of parameters (that might be empty), and a statement block surrounded by curly braces.</p>
<h3>Syntax</h3>
<p>The basic syntax is shown here.</p>',
		'html_code' => '',
		'css_code' => '',
		'javascript_code' => 
                '<script type="text/javascript">
   <!--
      function sayHello()
      {
         alert("Hello mate!");
      }
   //-->
</script>',
          	 ]);



Code::create([
        	'course_id' =>3,
                'lesson_id' => $js14->id,
                'heading' => 'Calling a Function', 
		'heading_body'=> '<p>To invoke a function somewhere later in the script, you would simply need to write the name of that function as shown in the following code.</p>',
		'html_code' => '<html>
   <head>
   
      <script type="text/javascript">
         function sayHello()
         {
            document.write ("Hello there!");
         }
      </script>
      
   </head>
   <body>
      <p>Click the following button to call the function</p>
      
      <form>
         <input type="button" onclick="sayHello()" value="Say Hello">
      </form>
      
      <p>Use different text in write method and then try...</p>
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '', 
          	 ]);



Code::create([
        	'course_id' =>3,
                'lesson_id' => $js14->id,
                'heading' => 'Function Parameters', 
		'heading_body'=> '<p>Till now, we have seen functions without parameters. But there is a facility to pass different parameters while calling a function. These passed parameters can be captured inside the function and any manipulation can be done over those parameters. A function can take multiple parameters separated by comma.</p>
<h3>Example</h3>
<p>Try the following example. We have modified our <b>sayHello</b> function here. Now it takes two parameters.</p>', 
		'html_code' => '<html>
   <head>
   
      <script type="text/javascript">
         function sayHello(name, age)
         {
            document.write (name + " is " + age + " years old.");
         }
      </script>
      
   </head>
   <body>
      <p>Click the following button to call the function</p>
      
      <form>
         <input type="button" onclick="sayHello(\'Zara\', 7)" value="Say Hello">
      </form>
      
      <p>Use different parameters inside the function and then try...</p>
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '', 
          	 ]);



Code::create([
        	'course_id' =>3,
                'lesson_id' => $js14->id,
                'heading' => 'The return Statement', 
		'heading_body'=> '<p>A JavaScript function can have an optional <b>return</b> statement. This is required if you want to return a value from a function. This statement should be the last statement in a function.</p>
<p>For example, you can pass two numbers in a function and then you can expect the function to return their multiplication in your calling program.</p>
<h3>Example</h3>
<p>Try the following example. It defines a function that takes two parameters and concatenates them before returning the resultant in the calling program.</p>
<pre class="prettyprint notranslate tryit">', 
		'html_code' => '<html>
   <head>
      
      <script type="text/javascript">
         function concatenate(first, last)
         {
            var full;
            full = first + last;
            return full;
         }
         
         function secondFunction()
         {
            var result;
            result = concatenate(\'Zara\', \'Ali\');
            document.write (result );
         }
      </script>
      
   </head>
   
   <body>
      <p>Click the following button to call the function</p>
      
      <form>
         <input type="button" onclick="secondFunction()" value="Call Function">
      </form>
      
      <p>Use different parameters inside the function and then try...</p>
  
  </body>
</html>',
		'css_code' => '',
                'javascript_code' => '', 
          	 ]);




$js15 = Lesson::create([
        	'admin_id' => $admin,
        	'course_id' => 3,
                'title' => 'JavaScript - Events',
                'slug' => 'js_javaScript_events',
          	 ]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js15->id,
                'heading' => 'What is an Event ?', 
		'heading_body'=> '<p>JavaScript\'s interaction with HTML is handled through events that occur when the user or the browser manipulates a page.</p>
<p>When the page loads, it is called an event. When the user clicks a button, that click too is an event. Other examples include events like pressing any key, closing a window, resizing a window, etc.</p>
<p>Developers can use these events to execute JavaScript coded responses, which cause buttons to close windows, messages to be displayed to users, data to be validated, and virtually any other type of response imaginable.</p>
<p>Events are a part of the Document Object Model (DOM) Level 3 and every HTML element contains a set of events which can trigger JavaScript Code.</p>
<p>Please go through this small tutorial for a better understanding <a href="/html/html_events_ref.htm">HTML Event Reference</a>. Here we will see a few examples to understand a relation between Event and JavaScript &minus;</p>',
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '', 
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js15->id,
                'heading' => 'onClick Event Type', 
		'heading_body'=> '<p>This is the most frequently used event type which occurs when a user clicks the left button of his mouse. You can put your validation, warning etc., against this event type.</p>
<h3>Example</h3>
<p>Try the following example.</p>', 
		'html_code' => '<html>
   <head>
      
      <script type="text/javascript">
         <!--
            function sayHello() {
               alert("Hello World")
            }
         //-->
      </script>
      
   </head>
   
   <body>
      <p>Click the following button and see result</p>
      
      <form>
         <input type="button" onclick="sayHello()" value="Say Hello" />
      </form>
      
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js15->id,
                'heading' => 'onSubmit Event type',
		'heading_body'=> '<p><b>onsubmit</b> is an event that occurs when you try to submit a form. You can put your form validation against this event type.</p>
<h3>Example</h3>
<p>The following example shows how to use onsubmit. Here we are calling a <b>validate()</b> function before submitting a form data to the webserver. If <b>validate()</b> function returns true, the form will be submitted, otherwise it will not submit the data.</p>
<p>Try the following example.</p>', 
		'html_code' => '<html>
   <head>
   
      <script type="text/javascript">
         <!--
            function validation() {
               all validation goes here
               .........
               return either true or false
            }
         //-->
      </script>
      
   </head>
   <body>
   
      <form method="POST" action="t.cgi" onsubmit="return validate()">
         .......
         <input type="submit" value="Submit" />
      </form>
      
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js15->id,
                'heading' => 'onMouseOver and onMouseOut', 
		'heading_body'=> '<p>These two event types will help you create nice effects with images or even with text as well. The <b>onmouseover</b> event triggers when you bring your mouse over any element and the <b>onmouseout</b> triggers when you move your mouse out from that element. Try the following example.</p>',
		'html_code' => '<html>
   <head>
   
      <script type="text/javascript">
         <!--
            function over() {
               document.write ("Mouse Over");
            }
            
            function out() {
               document.write ("Mouse Out");
            }
            
         //-->
      </script>
      
   </head>
   <body>
      <p>Bring your mouse inside the division to see the result:</p>
      
      <div onmouseover="over()" onmouseout="out()">
         <h2> This is inside the division </h2>
      </div>
         
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '', 
          	 ]);



$js16 = Lesson::create([
        	'admin_id' => $admin,
        	'course_id' => 3,
                'title' => 'JavaScript and Cookies',
                'slug' => 'js_javaScript_javascript_and_cookies',
          	 ]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js16->id,
                'heading' => 'What are Cookies ?', 
		'heading_body'=> '<p>Web Browsers and Servers use HTTP protocol to communicate and HTTP is a stateless protocol. But for a commercial website, it is required to maintain session information among different pages. For example, one user registration ends after completing many pages. But how to maintain users\' session information across all the web pages.</p>
<p>In many situations, using cookies is the most efficient method of remembering and tracking preferences, purchases, commissions, and other information required for better visitor experience or site statistics.</p>', 
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '', 
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js16->id,
                'heading' => 'How It Works ?', 
		'heading_body'=> '<p>Your server sends some data to the visitor\'s browser in the form of a cookie. The browser may accept the cookie. If it does, it is stored as a plain text record on the visitor\'s hard drive. Now, when the visitor arrives at another page on your site, the browser sends the same cookie to the server for retrieval. Once retrieved, your server knows/remembers what was stored earlier.</p>
<p>Cookies are a plain text data record of 5 variable-length fields &minus;</p>
<ul class="list">
<li><p><b>Expires</b> &minus; The date the cookie will expire. If this is blank, the cookie will expire when the visitor quits the browser.</p></li>
<li><p><b>Domain</b> &minus; The domain name of your site.</p></li>
<li><p><b>Path</b> &minus; The path to the directory or web page that set the cookie. This may be blank if you want to retrieve the cookie from any directory or page.</p></li>
<li><p><b>Secure</b> &minus; If this field contains the word "secure", then the cookie may only be retrieved with a secure server. If this field is blank, no such restriction exists.</p></li>
<li><p><b>Name=Value</b> &minus; Cookies are set and retrieved in the form of key-value pairs</p></li>
</ul>
<p>Cookies were originally designed for CGI programming. The data contained in a cookie is automatically transmitted between the web browser and the web server, so CGI scripts on the server can read and write cookie values that are stored on the client.</p>
<p>JavaScript can also manipulate cookies using the <b>cookie</b> property of the <b>Document</b> object. JavaScript can read, create, modify, and delete the cookies that apply to the current web page.</p>', 
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js16->id,
                'heading' => 'Storing Cookies',
		'heading_body'=> '<p>The simplest way to create a cookie is to assign a string value to the document.cookie object, which looks like this.</p>
<pre class="prettyprint notranslate">
document.cookie = "key1=value1;key2=value2;expires=date";
</pre>
<p>Here the <b>expires</b> attribute is optional. If you provide this attribute with a valid date or time, then the cookie will expire on a given date or time and thereafter, the cookies\' value will not be accessible.</p>
<p><b>Note</b> &minus; Cookie values may not include semicolons, commas, or whitespace. For this reason, you may want to use the JavaScript <b>escape()</b> function to encode the value before storing it in the cookie. If you do this, you will also have to use the corresponding <b>unescape()</b> function when you read the cookie value.</p>
<h3>Example</h3>
<p>Try the following. It sets a customer name in an input cookie.</p>', 
		'html_code' => '<html>
   <head>
      
      <script type = "text/javascript">
         <!--
            function WriteCookie()
            {
               if( document.myform.customer.value == "" ){
                  alert("Enter some value!");
                  return;
               }
               cookievalue= escape(document.myform.customer.value) + ";";
               document.cookie="name=" + cookievalue;
               document.write ("Setting Cookies : " + "name=" + cookievalue );
            }
         //-->
      </script>
      
   </head>
   
   <body>
   
      <form name="myform" action="">
         Enter name: <input type="text" name="customer"/>
         <input type="button" value="Set Cookie" onclick="WriteCookie();"/>
      </form>
   
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js16->id,
                'heading' => 'Reading Cookies', 
		'heading_body'=> '<p>Reading a cookie is just as simple as writing one, because the value of the document.cookie object is the cookie. So you can use this string whenever you want to access the cookie. The document.cookie string will keep a list of name=value pairs separated by semicolons, where <b>name</b> is the name of a cookie and value is its string value.</p>
<p>You can use strings\' <b>split()</b> function to break a string into key and values as follows &minus;</p>
<h3>Example</h3>
<p>Try the following example to get all the cookies.</p>', 
		'html_code' => '<html>
   <head>
   
      <script type="text/javascript">
         <!--
            function ReadCookie()
            {
               var allcookies = document.cookie;
               document.write ("All Cookies : " + allcookies );
               
               // Get all the cookies pairs in an array
               cookiearray = allcookies.split(\';\');
               
               // Now take key value pair out of this array
               for(var i=0; i<cookiearray.length; i++){
                  name = cookiearray[i].split(\'=\')[0];
                  value = cookiearray[i].split(\'=\')[1];
                  document.write ("Key is : " + name + " and Value is : " + value);
               }
            }
         //-->
      </script>
      
   </head>
   <body>
      
      <form name="myform" action="">
         <p> click the following button and see the result:</p>
         <input type="button" value="Get Cookie" onclick="ReadCookie()"/>
      </form>
      
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js16->id,
                'heading' => 'Setting Cookies Expiry Date', 
		'heading_body'=> '<p>You can extend the life of a cookie beyond the current browser session by setting an expiration date and saving the expiry date within the cookie. This can be done by setting the <b>‘expires’</b> attribute to a date and time.</p>
<h3>Example</h3>
<p>Try the following example. It illustrates how to extend the expiry date of a cookie by 1 Month.</p>', 
		'html_code' => '<html>
   <head>
   
      <script type="text/javascript">
         <!--
            function WriteCookie()
            {
               var now = new Date();
               now.setMonth( now.getMonth() + 1 );
               cookievalue = escape(document.myform.customer.value) + ";"
               
               document.cookie="name=" + cookievalue;
               document.cookie = "expires=" + now.toUTCString() + ";"
               document.write ("Setting Cookies : " + "name=" + cookievalue );
            }
         //-->
      </script>
      
   </head>
   <body>
   
      <form name="myform" action="">
         Enter name: <input type="text" name="customer"/>
         <input type="button" value="Set Cookie" onclick="WriteCookie()"/>
      </form>
      
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '', 
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js16->id,
                'heading' => 'Deleting a Cookie', 
		'heading_body'=> '<p>Sometimes you will want to delete a cookie so that subsequent attempts to read the cookie return nothing. To do this, you just need to set the expiry date to a time in the past.</p>
<h3>Example</h3>
<p>Try the following example. It illustrates how to delete a cookie by setting its expiry date to one month behind the current date.</p>', 
		'html_code' => '<html>
   <head>
   
      <script type="text/javascript">
         <!--
            function WriteCookie()
            {
               var now = new Date();
               now.setMonth( now.getMonth() - 1 );
               cookievalue = escape(document.myform.customer.value) + ";"
               
               document.cookie="name=" + cookievalue;
               document.cookie = "expires=" + now.toUTCString() + ";"
               document.write("Setting Cookies : " + "name=" + cookievalue );
            }
          //-->
      </script>
      
   </head>
   <body>
   
      <form name="myform" action="">
         Enter name: <input type="text" name="customer"/>
         <input type="button" value="Set Cookie" onclick="WriteCookie()"/>
      </form>
      
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '', 
          	 ]);


$js17 = Lesson::create([
        	'admin_id' => $admin,
        	'course_id' => 3,
                'title' => 'JavaScript - Page Redirection',
                'slug' => 'js_javaScript_page_redirection',
          	 ]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js17->id,
                'heading' => 'What is Page Redirection ?', 
		'heading_body'=> '<h2>What is Page Redirection ?</h2>
<p>You might have encountered a situation where you clicked a URL to reach a page X but internally you were directed to another page Y. It happens due to <b>page redirection</b>. This concept is different from <a href="/javascript/javascript_page_refresh.htm" title="JavaScript Page Refresh">JavaScript Page Refresh</a>.</p>
<p>There could be various reasons why you would like to redirect a user from the original page. We are listing down a few of the reasons &minus;</p>
<ul class="list">
<li><p>You did not like the name of your domain and you are moving to a new one. In such a scenario, you may want to direct all your visitors to the new site. Here you can maintain your old domain but put a single page with a page redirection such that all your old domain visitors can come to your new domain.</p></li>
<li><p>You have built-up various pages based on browser versions or their names or may be based on different countries, then instead of using your server-side page redirection, you can use client-side page redirection to land your users on the appropriate page.</p></li>
<li><p>The Search Engines may have already indexed your pages. But while moving to another domain, you would not like to lose your visitors coming through search engines. So you can use client-side page redirection. But keep in mind this should not be done to fool the search engine, it could lead your site to get banned.</p></li>', 
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js17->id,
                'heading' => 'How Page Re-direction Works ?', 
		'heading_body'=> '<p>The implementations of Page-Redirection are as follows.</p>
<h3>Example 1</h3>
<p>It is quite simple to do a page redirect using JavaScript at client side. To redirect your site visitors to a new page, you just need to add a line in your head section as follows.</p>', 
		'html_code' => '<html>
   <head>
      
      <script type="text/javascript">
         <!--
            function Redirect() {
               window.location="http://www.tutorialspoint.com";
            }
         //-->
      </script>
      
   </head>
   
   <body>
      <p>Click the following button, you will be redirected to home page.</p>
      
      <form>
         <input type="button" value="Redirect Me" onclick="Redirect();" />
      </form>
      
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);



$js18 = Lesson::create([
        	'admin_id' => $admin,
        	'course_id' => 3,
                'title' => 'JavaScript - Dialog Boxes',
                'slug' => 'js_javaScript_dialog_boxes',
          	 ]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js18->id,
                'heading' => 'JavaScript - Dialog Boxes',
		'heading_body'=> '<p>JavaScript supports three important types of dialog boxes. These dialog boxes can be used to raise an alert, or to get confirmation on any input or to have a kind of input from the users. Here we will discuss each dialog box one by one.</p>',
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js18->id,
                'heading' => 'Alert Dialog Box', 
		'heading_body'=> '<p>An alert dialog box is mostly used to give a warning message to the users. For example, if one input field requires to enter some text but the user does not provide any input, then as a part of validation, you can use an alert box to give a warning message.</p>
<p>Nonetheless, an alert box can still be used for friendlier messages. Alert box gives only one button "OK" to select and proceed.</p>', 
		'html_code' => '<html>
   <head>
   
      <script type="text/javascript">
         <!--
            function Warn() {
               alert ("This is a warning message!");
               document.write ("This is a warning message!");
            }
         //-->
      </script>
      
   </head>
   <body>
      <p>Click the following button to see the result: </p>
      
      <form>
         <input type="button" value="Click Me" onclick="Warn();" />
      </form>
      
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '', 
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js18->id,
                'heading' => 'Confirmation Dialog Box',
		'heading_body'=> '<p>A confirmation dialog box is mostly used to take user\'s consent on any option. It displays a dialog box with two buttons: <b>Cancel</b>.</p>
<p>If the user clicks on the OK button, the window method <b>confirm()</b> will return true. If the user clicks on the Cancel button, then <b>confirm()</b> returns false. You can use a confirmation dialog box as follows.</p>', 
		'html_code' => '<html>
   <head>
   
      <script type="text/javascript">
         <!--
            function getConfirmation(){
               var retVal = confirm("Do you want to continue ?");
               if( retVal == true ){
                  document.write ("User wants to continue!");
                  return true;
               }
               else{
                  document.write ("User does not want to continue!");
                  return false;
               }
            }
         //-->
      </script>
      
   </head>
   <body>
      <p>Click the following button to see the result: </p>
      
      <form>
         <input type="button" value="Click Me" onclick="getConfirmation();" />
      </form>
      
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);


Code::create([
        	'course_id' =>3,
                'lesson_id' => $js18->id,
                'heading' => 'Prompt Dialog Box', 
		'heading_body'=> '<p>The prompt dialog box is very useful when you want to pop-up a text box to get user input. Thus, it enables you to interact with the user. The user needs to fill in the field and then click OK.</p>
<p>This dialog box is displayed using a method called <b>prompt()</b> which takes two parameters: (i) a label which you want to display in the text box and (ii) a default string to display in the text box.</p>
<p>This dialog box has two buttons: <b>OK</b> and <b>Cancel</b>. If the user clicks the OK button, the window method <b>prompt()</b> will return the entered value from the text box. If the user clicks the Cancel button, the window method <b>prompt()</b> returns <b>null</b>.</p>
<h3>Example</h3>
<p>The following example shows how to use a prompt dialog box &minus;</p>', 
		'html_code' => '<html>
   <head>
      
      <script type="text/javascript">
         <!--
            function getValue(){
               var retVal = prompt("Enter your name : ", "your name here");
               document.write("You have entered : " + retVal);
            }
         //-->
      </script>
      
   </head>
   
   <body>
      <p>Click the following button to see the result: </p>
      
      <form>
         <input type="button" value="Click Me" onclick="getValue();" />
      </form>
      
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);



$js19 = Lesson::create([
        	'admin_id' => $admin,
        	'course_id' => 3,
                'title' => 'JavaScript - Void Keyword',
                'slug' => 'js_javaScript_void_keyword',
          	 ]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js19->id,
                'heading' => 'JavaScript - Void Keyword',
		'heading_body'=> '<p><b>void</b> is an important keyword in JavaScript which can be used as a unary operator that appears before its single operand, which may be of any type. This operator specifies an expression to be evaluated without returning a value.</p>',
		'html_code' => '<html>
   <head>      
      <script type = "text/javascript">
         <!--
         //-->
      </script>   
   </head>
   
   <body>   
      <p>Click the following, This won\'t react at all...</p>
      <a href = "javascript:void(alert(\'Warning!!!\'))">Click me!</a>     
   </body>
</html>',
		'css_code' => '',
                'javascript_code' => '', 
          	 ]);


$js18 = Lesson::create([
        	'admin_id' => $admin,
        	'course_id' => 3,
                'title' => 'JavaScript - Page Printing',
                'slug' => 'js_javaScript_page_printing',
          	 ]);
Code::create([
        	'course_id' =>3,
                'lesson_id' => $js18->id,
                'heading' => 'JavaScript - Page Printing',
		'heading_body'=> '<p>Many times you would like to place a button on your webpage to print the content of that web page via an actual printer. JavaScript helps you to implement this functionality using the <b>print</b> function of <b>window</b> object.</p>
<p>The JavaScript print function <b>window.print()</b> prints the current web page when executed. You can call this function directly using the <b>onclick</b> event as shown in the following example.</p>
<h3>Example</h3>
<p>Try the following example.</p>', 
		'html_code' => '<html>
   <head>      
      <script type = \"text/javascript\">
         <!--
         //-->
      </script>
   </head>
   
   <body>      
      <form>
         <input type = \"button\" value = "Print" onclick = \"window.print()\" />
      </form>   
   </body>
<html>',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);



Code::create([
        	'course_id' =>3,
                'lesson_id' => $js18->id,
                'heading' => 'How to Print a Page?',
		'heading_body'=> '<p>If you don’t find the above facilities on a web page, then you can use the browser\'s standard toolbar to get print the web page. Follow the link as follows.</p>', 
		'html_code' => '',
		'css_code' => '',
                'javascript_code' => '',
          	 ]);
    }
}
